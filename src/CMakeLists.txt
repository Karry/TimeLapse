cmake_minimum_required(VERSION 2.6)

project(timelapse)

SET(CMAKE_BUILD_TYPE Debug)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_HOME_DIRECTORY}/CMakeMod")
list(APPEND CMAKE_MODULE_PATH "../CMakeMod")

# set(CMAKE_AUTOMOC ON)
FIND_PACKAGE(Qt5 REQUIRED COMPONENTS Core) # QtGui 
FIND_PACKAGE(ImageMagick REQUIRED COMPONENTS Magick++) # convert


include_directories(
  ${Qt5Core_INCLUDE_DIRS}
  ${ImageMagick_INCLUDE_DIRS}
  ${CMAKE_CURRENT_BINARY_DIR} # for moc files generated by macro QT5_AUTOMOC
)

# enable warnings
ADD_DEFINITIONS( -Wall -pedantic -std=c++11 -fPIC)

# QT5 definitions
ADD_DEFINITIONS(${Qt5Core_DEFINITIONS})

# ImageMagick compile time configuration
ADD_DEFINITIONS(-DMAGICKCORE_QUANTUM_DEPTH=16) # Number of bits in a pixel Quantum (8/16/32/64)
ADD_DEFINITIONS(-DMAGICKCORE_HDRI_SUPPORT=0)
ADD_DEFINITIONS(-DMAGICKCORE_HDRI_ENABLE=0)

## for debug
message(STATUS "Module path:              ${CMAKE_MODULE_PATH}")
message(STATUS "Qt5Core_INCLUDE_DIRS:     ${Qt5Core_INCLUDE_DIRS}")
message(STATUS "ImageMagick_INCLUDE_DIRS: ${ImageMagick_INCLUDE_DIRS}")
message(STATUS "ImageMagick_LIBRARIES:    ${ImageMagick_LIBRARIES}")

qt5_generate_moc(timelapse_assembly.h timelapse_assembly.moc)
qt5_generate_moc(black_hole_device.h black_hole_device.moc)
qt5_generate_moc(input_image_info.h input_image_info.moc)

set(timelapse_assembly_SRCS 

    timelapse_assembly.cpp
    timelapse_assembly.moc
    
    black_hole_device.cpp
    black_hole_device.moc

    input_image_info.cpp
    input_image_info.moc
)

# QT5_AUTOMOC(${timelapse_assembly_SRCS})

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

add_executable (timelapse_assembly
				${timelapse_assembly_SRCS}
)
SET_TARGET_PROPERTIES(timelapse_assembly PROPERTIES COMPILE_FLAGS "-g")

#Link the timelapse_assembly executable to the Qt 5 libraries.
target_link_libraries(	timelapse_assembly
      Qt5::Core 
      ${ImageMagick_LIBRARIES} # Magick++-6.Q16
) 

install(TARGETS timelapse_assembly
		RUNTIME DESTINATION bin COMPONENT applications
		LIBRARY DESTINATION lib COMPONENT libraries
		ARCHIVE DESTINATION lib/static COMPONENT libraries
		)

# INSTALL(FILES monitormanager.desktop DESTINATION share/applications)
# INSTALL(FILES monitormanager.png DESTINATION share/icons)

# message(SYSTEM " DATA INSTALL DIR ${DATA_INSTALL_DIR}")
