cmake_minimum_required(VERSION 2.6)

project(timelapse)

SET(CMAKE_BUILD_TYPE Debug)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_HOME_DIRECTORY}/CMakeMod")
list(APPEND CMAKE_MODULE_PATH "../CMakeMod")

# set(CMAKE_AUTOMOC ON)
FIND_PACKAGE(Qt5 REQUIRED COMPONENTS Core) 
FIND_PACKAGE(ImageMagick REQUIRED COMPONENTS Magick++ MagickCore)
FIND_PACKAGE(VidStab REQUIRED) 
FIND_PACKAGE(V4L REQUIRED) 
FIND_PACKAGE(GPHOTO2 REQUIRED) 

include_directories(
  ${Qt5Core_INCLUDE_DIRS}
  ${ImageMagick_INCLUDE_DIRS}
  ${LIBVIDSTAB_INCLUDE_DIRS}
  ${CMAKE_CURRENT_BINARY_DIR} # for moc files generated by macro QT5_AUTOMOC
  ${LIBV4L_INCLUDE_DIRS}
  ${GPHOTO2_INCLUDE_DIR}
)

# enable warnings
ADD_DEFINITIONS( -Wall -Wextra -pedantic -fPIC)
if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGXX OR CMAKE_COMPILER_IS_GNUCC)
  set(TIMELAPS_WARNING_FLAGS "-Wall -pedantic -Winit-self -Wno-overloaded-virtual -Wcast-qual -Wwrite-strings -Wextra -Wno-long-long")
  if(EMSCRIPTEN)
    set(TIMELAPS_WARNING_FLAGS "${TIMELAPS_WARNING_FLAGS} -Wno-warn-absolute-paths")
  elseif(NOT APPLE)
    set(TIMELAPS_WARNING_FLAGS "${TIMELAPS_WARNING_FLAGS} -Wno-unused-but-set-parameter")
  endif()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${TIMELAPS_WARNING_FLAGS}")
endif()

# QT5 definitions
ADD_DEFINITIONS(${Qt5Core_DEFINITIONS})

# read and setup ImageMagick cflags (these flags are not setup by FindImageMagick.cmake)
FIND_PACKAGE(PkgConfig REQUIRED)
pkg_check_modules(IM "ImageMagick")
# ImageMagick compile time configuration
# ADD_DEFINITIONS(-DMAGICKCORE_QUANTUM_DEPTH=16) # Number of bits in a pixel Quantum (8/16/32/64)
# ADD_DEFINITIONS(-DMAGICKCORE_HDRI_SUPPORT=0) # colorHistogram fails with SIGSEGV when this option is enabled
ADD_DEFINITIONS(${IM_CFLAGS})

## for debug
message(STATUS "Module path:              ${CMAKE_MODULE_PATH}")
message(STATUS "Qt5Core_INCLUDE_DIRS:     ${Qt5Core_INCLUDE_DIRS}")
message(STATUS "Qt5Core_DEFINITIONS:      ${Qt5Core_DEFINITIONS}")
message(STATUS "ImageMagick_INCLUDE_DIRS: ${ImageMagick_INCLUDE_DIRS}")
message(STATUS "ImageMagick_LIBRARIES:    ${ImageMagick_LIBRARIES}")
message(STATUS "IM_CFLAGS:                ${IM_CFLAGS}")
message(STATUS "LIBVIDSTAB_INCLUDE_DIRS:  ${LIBVIDSTAB_INCLUDE_DIRS}")
message(STATUS "LIBVIDSTAB_LIBRARIES:     ${LIBVIDSTAB_LIBRARIES}")
message(STATUS "LIBVIDSTAB_FOUND:         ${LIBVIDSTAB_FOUND}")
message(STATUS "LIBV4L_INCLUDE_DIRS:      ${LIBV4L_INCLUDE_DIRS}")
message(STATUS "LIBV4L_LIBRARIES:         ${LIBV4L_LIBRARIES}")
message(STATUS "LIBV4L_FOUND:             ${LIBV4L_FOUND}")
message(STATUS "GPHOTO2_FOUND:            ${GPHOTO2_FOUND}")
message(STATUS "GPHOTO2_INCLUDE_DIR:      ${GPHOTO2_INCLUDE_DIR}")
message(STATUS "GPHOTO2_LIBRARIES:        ${GPHOTO2_LIBRARIES}")

qt5_generate_moc(timelapse_assembly.h       timelapse_assembly.moc)
qt5_generate_moc(timelapse_deflicker.h      timelapse_deflicker.moc)
qt5_generate_moc(black_hole_device.h        black_hole_device.moc)
qt5_generate_moc(input_image_info.h         input_image_info.moc)

qt5_generate_moc(pipeline.h                 pipeline.moc)
qt5_generate_moc(pipeline_handler.h         pipeline_handler.moc)
qt5_generate_moc(pipeline_frame_mapping.h   pipeline_frame_mapping.moc)
qt5_generate_moc(pipeline_frame_prepare.h   pipeline_frame_prepare.moc)
qt5_generate_moc(pipeline_video_assembly.h  pipeline_video_assembly.moc)
qt5_generate_moc(pipeline_write_frame.h     pipeline_write_frame.moc)
qt5_generate_moc(pipeline_resize_frame.h    pipeline_resize_frame.moc)
qt5_generate_moc(pipeline_source.h          pipeline_source.moc)
qt5_generate_moc(pipeline_deflicker.h       pipeline_deflicker.moc)
qt5_generate_moc(pipeline_stab.h            pipeline_stab.moc)
qt5_generate_moc(pipeline_cpt_v4l.h         pipeline_cpt_v4l.moc)
qt5_generate_moc(pipeline_cpt_gphoto2.h     pipeline_cpt_gphoto2.moc)
qt5_generate_moc(pipeline_cpt.h             pipeline_cpt.moc)
qt5_generate_moc(timelapse_stabilize.h      timelapse_stabilize.moc)
qt5_generate_moc(timelapse_capture.h        timelapse_capture.moc)

set(timelapse_SRCS 

    black_hole_device.cpp
    black_hole_device.moc

    input_image_info.cpp
    input_image_info.moc

    pipeline_handler.cpp
    pipeline_handler.moc

    pipeline_frame_mapping.cpp
    pipeline_frame_mapping.moc

    pipeline_frame_prepare.cpp
    pipeline_frame_prepare.moc

    pipeline_resize_frame.cpp
    pipeline_resize_frame.moc

    pipeline_video_assembly.cpp
    pipeline_video_assembly.moc

    pipeline_write_frame.cpp
    pipeline_write_frame.moc

    pipeline_source.cpp
    pipeline_source.moc

    pipeline_deflicker.cpp
    pipeline_deflicker.moc

    pipeline_stab.cpp
    pipeline_stab.moc

    pipeline_cpt_v4l.cpp
    pipeline_cpt_v4l.moc

    pipeline_cpt_gphoto2.cpp
    pipeline_cpt_gphoto2.moc

    pipeline_cpt.cpp
    pipeline_cpt.moc

    pipeline.cpp
    pipeline.moc
)
set(timelapse_assembly_SRCS 

    timelapse_assembly.cpp
    timelapse_assembly.moc
)
set(timelapse_deflicker_SRCS 

    timelapse_deflicker.cpp
    timelapse_deflicker.moc
)
set(timelapse_stabilize_SRCS 

    timelapse_stabilize.cpp
    timelapse_stabilize.moc
)
set(timelapse_capture_SRCS 

    timelapse_capture.cpp
    timelapse_capture.moc
)

# QT5_AUTOMOC(${timelapse_assembly_SRCS})

ADD_LIBRARY(timelapse SHARED 
			${timelapse_SRCS}
			)

add_executable (timelapse_assembly
				${timelapse_assembly_SRCS}
)
add_executable (timelapse_deflicker
				${timelapse_deflicker_SRCS}
)
add_executable (timelapse_stabilize
				${timelapse_stabilize_SRCS}
)
add_executable (timelapse_capture
				${timelapse_capture_SRCS}
)

set_property(TARGET timelapse PROPERTY CXX_STANDARD 17)
set_property(TARGET timelapse_assembly PROPERTY CXX_STANDARD 17)
set_property(TARGET timelapse_deflicker PROPERTY CXX_STANDARD 17)
set_property(TARGET timelapse_stabilize PROPERTY CXX_STANDARD 17)
set_property(TARGET timelapse_capture PROPERTY CXX_STANDARD 17)

#Link the timelapse_assembly executable to the Qt 5 libraries.
target_link_libraries(	timelapse
      Qt5::Core 
      ${ImageMagick_LIBRARIES} # Magick++-6.Q16
      ${LIBVIDSTAB_LIBRARIES} # LibVidStab
      ${LIBV4L_LIBRARIES}
      ${GPHOTO2_LIBRARIES}
) 
target_link_libraries(	timelapse_assembly
      timelapse
      Qt5::Core 
      ${ImageMagick_LIBRARIES} # Magick++-6.Q16
      ${GPHOTO2_LIBRARIES}
) 
target_link_libraries(	timelapse_deflicker
      timelapse
      Qt5::Core 
      ${ImageMagick_LIBRARIES} # Magick++-6.Q16
) 
target_link_libraries(	timelapse_stabilize
      timelapse
      Qt5::Core 
      ${ImageMagick_LIBRARIES} # Magick++-6.Q16
      ${LIBVIDSTAB_LIBRARIES} # LibVidStab
) 
target_link_libraries(	timelapse_capture
      timelapse
      Qt5::Core 
      ${ImageMagick_LIBRARIES} # Magick++-6.Q16
      ${LIBV4L_LIBRARIES}
      ${GPHOTO2_LIBRARIES}
) 

install(TARGETS timelapse timelapse_assembly timelapse_deflicker timelapse_stabilize timelapse_capture
		RUNTIME DESTINATION bin COMPONENT applications
		LIBRARY DESTINATION lib COMPONENT libraries
		ARCHIVE DESTINATION lib/static COMPONENT libraries
		)

# INSTALL(FILES monitormanager.desktop DESTINATION share/applications)
# INSTALL(FILES monitormanager.png DESTINATION share/icons)

# message(SYSTEM " DATA INSTALL DIR ${DATA_INSTALL_DIR}")
